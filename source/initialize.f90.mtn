module initialize

!-----------------------------------------------------------------
!   This module sets the initial conditions of the model and
!   and sets the values of the eta levels.
!-----------------------------------------------------------------

use kinds
use physical_parameters
use model_parameters
use prognostics
use step

implicit none
save


contains


!===================================================================
! BEGINNING OF INITIALIZE_MODEL
!===================================================================

subroutine initialize_model(step_count,tau_initial)

implicit none

!-------------------------------------------------------------------
! INTENT IN 
!-------------------------------------------------------------------
integer (kind = int_kind), intent(in) :: step_count

!-------------------------------------------------------------------
! INTENT INOUT
!-------------------------------------------------------------------
real (kind = dbl_kind), intent(inout) :: tau_initial

!-------------------------------------------------------------------
! LOCAL
!-------------------------------------------------------------------
integer :: i, j

logical, parameter :: init_from_ic_prog_file = .false.
logical, parameter :: init_from_bc_surf_file = .false.
logical, parameter :: conical_mtn = .false.

real (kind=dbl_kind), parameter ::    &
     r0 = (pi/9._dbl_kind)*a_rad,   &  ! radius of mountain (cone-shaped TC5 mountain)
     r0_G = (p5/log(c2)**0.5)*r0,    &  ! radius of Gaussian mountain (matches half-width of TC5 mtn)
     x_ctr = -p5*pi*a_rad,    &         ! x-coord center of mountain
     y_ctr = (pi/6._dbl_kind)*a_rad,   &         ! y-coord center of mountain
     mtn_ht = c0  !  2000._dbl_kind     ! height of mountain (m)
real (kind=dbl_kind) :: r_test     ! test to see if within perturbation



call init_prognostics





! Initialize prognostic and tendency time step indices
n4 = mod(step_count+1,2) + 1
n3 = mod(step_count,2) + 1
n3_f = mod(step_count+2,3) + 1
n2_f = mod(step_count+1,3) + 1
n1_f = mod(step_count,3) + 1


! Initialize x-y locations
do i = 1,im
   x_u(i) = (i-1)*dx - p5*im*dx           ! origin at center of domain
   x_h(i) = (i-1)*dx + p5*dx - p5*im*dx   ! origin at center of domain
end do
do j = 1,jm
   y_v(j) = (j-1)*dy - p5*jm*dy           ! origin at center of domain
   y_h(j) = (j-1)*dy + p5*dy - p5*jm*dy   ! origin at center of domain
end do



if ( init_from_ic_prog_file ) then

   print *
   print *, "Initializing prognostic variables from ic_prog file"
   print *

   open (unit = 20, file = "./data/ic_prog", action = "read", form = "unformatted")


   ! Read in initial value of time (tau)
   read (20) tau_initial


   ! Read initial conditions prognostic variables
   do j = 1,jm
      read (20) (u(i,j,n4),  i = 1,im)
      read (20) (v(i,j,n4),  i = 1,im)
      read (20) (h_star(i,j,n4),  i = 1,im)
   end do

   close (20)

else

   print *
   print *, "Initializing prognostic variables within model"
   print *

   ! Mimicking Williamson et al. (1992) test case 5 -- Zonal Flow over an Isolated Mtn.

   tau_initial = c0
   do j = 1, jm
      u(:,j,n4) = 20._dbl_kind*cos(y_h(j)/a_rad)
   end do
   v(:,:,n4) = c0
   h_star(:,:,n4) = 5960._dbl_kind    ! initially h_0

   ! put mountain in place

   if ( conical_mtn ) then

      do j = 1, jm
         do i = 1, im

            r_test = ( (x_h(i)-x_ctr)**2 + (y_h(j)-y_ctr)**2 ) ** 0.5
            if ( r_test.le.r0 ) then
               hs(i,j) = mtn_ht*(c1-r_test/r0)
               h_star(i,j,n4) = h_star(i,j,n4) - hs(i,j)
            else
               hs(i,j) = c0
            end if

            ! adjust height for geostrophic balance
            h_star(i,j,n4) = h_star(i,j,n4) - invgrav*Omega*a_rad*20._dbl_kind*sin(y_h(j)/a_rad)**2

         end do
      end do

   else   ! Gaussian mountain case
   
      do j = 1, jm
         do i = 1, im

            r_test = ( (x_h(i)-x_ctr)**2 + (y_h(j)-y_ctr)**2 ) ** 0.5
            if ( r_test.le.(0.375_dbl_kind*pi*a_rad) ) then
               hs(i,j) = mtn_ht*exp( - (r_test/r0_G)**2 )
               h_star(i,j,n4) = h_star(i,j,n4) - hs(i,j)
            else
               hs(i,j) = c0
            end if

            ! adjust height for geostrophic balance
            h_star(i,j,n4) = h_star(i,j,n4) - invgrav*Omega*a_rad*20._dbl_kind*sin(y_h(j)/a_rad)**2

         end do
      end do

   end if

end if




! Initialize Coriolis parameter
! f_cor(:) = 3.24e-04_dbl_kind     ! f-plane
do j = 1,jm
   f_cor(j) = c2*Omega*sin(y_v(j)/a_rad)
   ! print *, "j =", j, "     y =", y_v(j), "      lat =", &
   !    (y_v(j)/a_rad)*180._dbl_kind/pi, "     f_cor=", f_cor(j)
end do



! Set horizontal grid point "+1/-1" indices
do i = 1,im
   ip1(i) = mod(i+im,im) + 1
   im1(i) = mod(i+im-2,im) + 1
   ip2(i) = mod(i+im+1,im) + 1
   im2(i) = mod(i+im-3,im) + 1
end do
do j = 1,jm
   jp1(j) = mod(j+jm,jm) + 1
   jm1(j) = mod(j+jm-2,jm) + 1
   jp2(j) = mod(j+jm+1,jm) + 1
   jm2(j) = mod(j+jm-3,jm) + 1
end do


end subroutine initialize_model

!===================================================================
! END OF INITIALIZE_MODEL
!===================================================================


end module initialize
